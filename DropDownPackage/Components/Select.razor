@using DropDownPackage.Components
@using DropDownPackage.CustomClasses
@typeparam TItem

<div class="sbc-select" data-for="@Id" b-oioz0f36uz>
	@if (!string.IsNullOrEmpty(Label))
	{
		<label for="@Id" style="@(!string.IsNullOrEmpty(errorMessage) ? "color: var(--error);" : null)" b-oioz0f36uz>
			@Label
		</label>
	}
	<button accesskey="@AccessKey"
			disabled="@Disabled"
			style="width: @Width;"
			class="graba-select-button"
			id="@Id"
			@onmousedown="@(EventCallback.Factory.Create<MouseEventArgs>((object)this, (Func<Task>)ToggleShow))"
			@onkeydown="@(EventCallback.Factory.Create<KeyboardEventArgs>((object)this, (Func<KeyboardEventArgs, Task>)HandleButtonKeyDown))"
			@onfocus="@(EventCallback.Factory.Create<FocusEventArgs>((object)this, (Func<Task>)HandleOnFocus))"
			b-oioz0f36uz>
		<span style="@(HideIcon ? "max-width: 100%" : null)" b-oioz0f36uz>
			@(this.text ?? Placeholder)
		</span>
		@if (!HideIcon)
		{
			@Icons.CHEVRON_UP_DOWN
		}
	</button>
	@if (!string.IsNullOrEmpty(Info))
	{
		<span class="info" b-oioz0f36uz>
			@Info
		</span>
	}
	@if (!string.IsNullOrEmpty(errorMessage))
	{
		<p style="color: var(--error); font-size: 14px" b-oioz0f36uz>
			@errorMessage
		</p>
	}
</div>

@if (show != null)
{
	<div class="sbc-ac-list @show" data-for="@Id" style="position: fixed; width: @ListWidth" b-oioz0f36uz>
		<div class="search-box" style="@(searchable ? null : "opacity:0; height: 0 !important; margin-bottom: 0")" b-oioz0f36uz>
			@Icons.SEARCH_ICON
			<input tabindex="-1"
				   aria-autocomplete="none"
				   spellcheck="false"
				   type="text"
				   placeholder="@Placeholder"
				   autofocus="false"
				   @oninput="@(EventCallback.Factory.Create((object)this, (Action<ChangeEventArgs>)HandleSearch))"
				   @onkeyup="@(EventCallback.Factory.Create((object)this, (Action<KeyboardEventArgs>)HandleKeyUp))"
				   @onkeydown="@(EventCallback.Factory.Create((object)this, (Func<KeyboardEventArgs, Task>)HandleKeyDown))"
				   @onblur="@(EventCallback.Factory.Create<FocusEventArgs>((object)this, (Action)HideListing))"
				   value="@BindConverter.FormatValue(search)"
				   @onchange="@(EventCallback.Factory.CreateBinder(this, delegate (string? __value) { search = __value; }, search))"
				   b-oioz0f36uz />
		</div>
		<div class="list-items" b-oioz0f36uz>
			@if (filterItems != null)
			{
				var num = 0;
				foreach (var item in filterItems)
				{
					var text = Display(item);
					if (text.StartsWith("**") && text.EndsWith("**"))
					{
						<b b-oioz0f36uz>
							@text.Substring(2, text.Length - 2 - 2)
						</b>
						continue;
					}
					if (text == "-")
					{
						<hr b-oioz0f36uz />
						continue;
					}
					<div class="item @(itemIndex == num ? "selected" : null)"
						 @onmousedown="@(EventCallback.Factory.Create<MouseEventArgs>(this, () => SetItem(item)))"
						 b-oioz0f36uz>
						@text
						@if (item != null && item.Equals(SelectedItem))
						{
							if (itemIndex == -1)
							{
								itemIndex = num;
							}
							@Icons.TICK_ICON
						}
					</div>
					num++;
				}

				if (filterItems.Length == 0 && !string.IsNullOrEmpty(search) && !HideIcon)
				{
					itemIndex = -1;
					<div style="text-align: center; padding: 2rem; font-size: 14px" b-oioz0f36uz>
						No match found.
					</div>
				}
			}
		</div>
	</div>
}
